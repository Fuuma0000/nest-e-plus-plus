generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Bookmark {
  work_id Int @db.UnsignedInt
  user_id Int @db.UnsignedInt

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)

  works Work @relation(fields: [work_id], references: [id])
  users User @relation(fields: [user_id], references: [id])

  @@id([work_id, user_id])
  @@index([user_id])
  @@index([work_id])
}

model Affiliation {
  id   Int    @id @default(autoincrement()) @db.UnsignedInt
  name String @db.VarChar(30)

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)

  users User[]
}

model Event {
  id                   Int       @id @default(autoincrement()) @db.UnsignedInt
  name                 String    @db.VarChar(50)
  start_at             DateTime? @db.DateTime(0)
  end_at               DateTime? @db.DateTime(0)
  icon_url             String?   @db.VarChar(255)
  description          String?   @db.Text // イベントの説明
  detail               String?   @db.Text // イベントの詳細
  need_proofreading    Boolean?  @default(false) // イベントに校正が必要かどうか
  is_requires_password Boolean?  @default(false) // イベントにパスワードが必要かどうか
  password             String?   @db.VarChar(255) // イベントに設定されたパスワード

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)

  event_user_authoritys Event_user_authority[]
  works                 Work[]
}

model Genre {
  id   Int    @id @default(autoincrement()) @db.UnsignedInt
  name String @db.VarChar(30)

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)

  work_data_genres Work_data_genre[]
}

model Job {
  id   Int    @id @default(autoincrement()) @db.UnsignedInt
  name String @db.VarChar(30)

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)

  user_jobs User_job[]
}

model Authority {
  id   Int    @id @default(autoincrement()) @db.UnsignedInt
  name String @db.VarChar(30)

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)

  event_user_authoritys Event_user_authority[]
}

model Technology {
  id   Int    @id @default(autoincrement()) @db.UnsignedInt
  name String @db.VarChar(30)

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)

  work_data_technologies Work_data_technology[]
}

model User {
  id                           Int     @id @default(autoincrement()) @db.UnsignedInt
  email                        String  @unique(map: "email") @db.VarChar(255)
  password                     String  @db.VarChar(255)
  username                     String? @db.VarChar(50)
  affiliation_id               Int?    @db.UnsignedInt // 学校などの所属
  enrollment_year              Int?
  graduation_year              Int?
  is_job_hunt_completed        Boolean @default(false)
  self_introduction            String? @db.Text
  icon_url                     String? @db.VarChar(255)
  show_profile_in_shared_url   Boolean @default(false)
  show_profile_in_public_event Boolean @default(false)

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)

  bookmarks                   Bookmark[]
  event_user_authorities      Event_user_authority[]
  affiliation                 Affiliation?                  @relation(fields: [affiliation_id], references: [id])
  user_jobs                   User_job[]
  user_urls                   User_url[]
  work_data_users             Work_data_user[]
  Email_change_verification   Email_change_verification[]
  Password_reset_verification Password_reset_verification[]

  @@index([affiliation_id])
}

model User_job {
  user_id Int @db.UnsignedInt
  job_id  Int @db.UnsignedInt

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)

  users User @relation(fields: [user_id], references: [id])
  jobs  Job  @relation(fields: [job_id], references: [id])

  @@id([user_id, job_id])
  @@index([job_id])
  @@index([user_id])
}

model User_url {
  id      Int    @id @default(autoincrement()) @db.UnsignedInt
  user_id Int    @db.UnsignedInt
  name    String @db.VarChar(30)
  url     String @db.VarChar(255)

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)

  users User @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model Work {
  id       Int @id @default(autoincrement()) @db.UnsignedInt
  event_id Int @db.UnsignedInt

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)

  bookmarks      Bookmark[]
  events         Event           @relation(fields: [event_id], references: [id])
  work_data      Work_data[]
  work_share_url Work_share_url?

  @@index([event_id])
}

model Work_data {
  id                 Int     @id @default(autoincrement()) @db.UnsignedInt
  work_id            Int     @db.UnsignedInt
  name               String  @db.VarChar(100)
  catch_copy         String  @db.VarChar(100)
  description        String  @db.VarChar(500)
  work_url           String? @db.VarChar(255)
  thumbnail_url      String? @db.VarChar(255)
  movie_url          String? @db.VarChar(255)
  system_diagram_url String? @db.VarChar(255)
  detail             String? @db.Text
  is_approved        Boolean @default(false)

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)

  work_data_genres       Work_data_genre[]
  work_data_images       Work_data_image[]
  work_data_technologies Work_data_technology[]
  work_data_tools        Work_data_tool[]
  work_data_users        Work_data_user[]

  works Work? @relation(fields: [work_id], references: [id])

  @@index([work_id])
}

model Work_data_genre {
  work_data_id Int @db.UnsignedInt
  genre_id     Int @db.UnsignedInt

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)

  work_data Work_data @relation(fields: [work_data_id], references: [id])
  genres    Genre     @relation(fields: [genre_id], references: [id])

  @@id([work_data_id, genre_id])
  @@index([genre_id])
  @@index([work_data_id])
}

model Work_data_technology {
  work_data_id  Int @db.UnsignedInt
  technology_id Int @db.UnsignedInt

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)

  work_data    Work_data  @relation(fields: [work_data_id], references: [id])
  technologies Technology @relation(fields: [technology_id], references: [id])

  @@id([work_data_id, technology_id])
  @@index([technology_id])
  @@index([work_data_id])
}

model Work_data_user {
  work_data_id     Int     @db.UnsignedInt
  user_id          Int     @db.UnsignedInt
  role_explanation String? @db.VarChar(50)

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)

  work_data Work_data @relation(fields: [work_data_id], references: [id])
  users     User      @relation(fields: [user_id], references: [id])

  @@id([work_data_id, user_id])
  @@index([user_id])
  @@index([work_data_id])
}

model Tool {
  id   Int    @id @default(autoincrement()) @db.UnsignedInt
  name String @db.VarChar(30)

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)

  work_data_tools Work_data_tool[]
}

model Event_user_authority {
  event_id     Int @db.UnsignedInt
  user_id      Int @db.UnsignedInt
  authority_id Int @db.UnsignedInt

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)

  events     Event     @relation(fields: [event_id], references: [id])
  users      User      @relation(fields: [user_id], references: [id])
  authoritys Authority @relation(fields: [authority_id], references: [id])

  @@id([event_id, user_id, authority_id])
  @@index([event_id])
  @@index([authority_id])
  @@index([user_id])
}

model Work_data_image {
  id           Int     @id @default(autoincrement()) @db.UnsignedInt
  work_data_id Int     @db.UnsignedInt
  url          String? @db.VarChar(255)
  order        Int?    @db.TinyInt

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)

  work_data Work_data @relation(fields: [work_data_id], references: [id])

  @@index([work_data_id])
}

model Work_data_tool {
  work_data_id Int @db.UnsignedInt
  tool_id      Int @db.UnsignedInt

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)

  work_data Work_data @relation(fields: [work_data_id], references: [id])
  tools     Tool      @relation(fields: [tool_id], references: [id])

  @@id([work_data_id, tool_id])
  @@index([tool_id])
  @@index([work_data_id])
}

// メール認証待ちのユーザー
model Signup_verification {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  email      String   @unique(map: "email") @db.VarChar(255)
  password   String   @db.VarChar(255)
  token      String   @db.VarChar(255)
  expired_at DateTime @db.DateTime(0)

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)
}

// パスワードリセット待ちのユーザー
model Password_reset_verification {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int      @db.UnsignedInt
  email      String   @unique(map: "email") @db.VarChar(255)
  token      String   @db.VarChar(255)
  expired_at DateTime @db.DateTime(0)

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)

  users User @relation(fields: [user_id], references: [id])
}

// メール変更待ちのユーザー
model Email_change_verification {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int      @db.UnsignedInt
  email      String   @unique(map: "email") @db.VarChar(255)
  token      String   @db.VarChar(255)
  expired_at DateTime @db.DateTime(0)

  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)

  users User @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

// 作品の共有URL
model Work_share_url {
  id      String @id @default(uuid()) @db.VarChar(36)
  work_id Int    @unique @db.UnsignedInt
  token   String @unique @db.VarChar(36)

  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)

  work Work @relation(fields: [work_id], references: [id])
}
